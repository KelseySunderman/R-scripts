###Automate the transfer of database1 tables to database2
##Write the number of records to a csv

library(odbc)
library(dplyr)
library(purrr)
library(tidyverse)

con1 <- dbConnect(odbc::odbc(), dsn = "database1")
con2 <- dbConnect(odbc::odbc(), dsn = "database2")

##List of tablenames in database1 and its in new tablename when it's imported
database1 <-  tibble(
  TableName = c('culocmhg',
  'culshmhg',
  'cumktmhg',
  'cuoptmhg',
  'cupaxmhg',
  'cuphsmhg',
  'cuphymhg',
  'cuposmhg'
),
NewTableName = c('Products',
'Customers',
  'OutboundSales',
  'InboundSales',
  'Inventory',
  'Contracts',
  'Discounts',
  'Locations'
)
)

tab <- database1 %>% select(TableName)

##split into groups
A <- split(tab, tab$TableName) 

##loops through each tablename and grabs the number of records in it 
B <- tab %>% mutate(c = map((map_chr(A, function(x) {paste0(paste0("SELECT COUNT(*) 
FROM OPENQUERY (database1, 'SELECT * FROM dbo.",x,"')"))
  })), ~dbGetQuery(con1,.))) 

B <- unnest(B)

##omits tables with no rows
C <- cbind(B[1], NumberofRecords = na.omit(unlist(B[-1])))

D <- inner_join(database1, C, by = "TableName")

##writes down the number of records 
write_csv(D, 'database1number.csv')


##keeping only the tables with records
E <- D %>% filter(NumberofRecords!=0) %>% drop_na()

#import statement
tryCatch({map(map2_chr(E$NewTableName, E$TableName, ~paste0("SELECT * INTO database2.",.x," FROM OPENQUERY (database1, 'SELECT * FROM dbo.",.y,"')")), 
     ~dbSendQuery(con2,.))}, error = function(e) print(e)
     )
