library(odbc)
library(purrr)
library(tidyverse)
library(furrr)
library(tidyr)
library(dplyr)
library(RODBC)

load('/data/resources/resources')

databasenamecon <- resources$databases$databasename$.connection_string

rm('resources')

databasename <- dbConnect(odbc::odbc(), .connection_string = databasenamecon)


views <- DBI::dbGetQuery(
  databasename,
  "DECLARE @schema_name AS VARCHAR(MAX)  = NULL;
  DECLARE @view_name AS VARCHAR(MAX) = NULL;
  
  SELECT 
  OBJECT_SCHEMA_NAME(v.object_id) schema_name,
  v.name view_name
  FROM 
  sys.views as v
  WHERE 
  (@schema_name IS NULL OR 
  OBJECT_SCHEMA_NAME(v.object_id) LIKE '%' + @schema_name + '%') AND
  (@view_name IS NULL OR
  v.name LIKE '%' + @view_name + '%')"
)'
)

views <- views %>% mutate(name = paste0(views$schema_name, ".", views$view_name)) %>% 
  select(name)

##loops through each view and grabs the number of records in it

viewsql <- views %>% mutate(sql = map_chr(views$name,
                                          ~paste0("SELECT * FROM sys.dm_sql_referenced_entities('",.x,"','OBJECT')"))
)

viewsql <- viewsql %>% group_by(name, sql) %>% nest()

viewsec <- viewsql %>% mutate(fetch = future_map(sql, possibly(~dbGetQuery(databasename, .x), otherwise = NA_character_)))

viewcombine <- viewsec %>% unnest(fetch) %>% select(-sql)
viewcombine$type <-c("view")


# Stored Procedure dependencies -------------------------------------------

procedures <- DBI::dbGetQuery(
  databasename,
  "SELECT SPECIFIC_SCHEMA, SPECIFIC_NAME
  FROM databasename.information_schema.routines 
  WHERE routine_type = 'PROCEDURE'
  AND LEFT(SPECIFIC_NAME, 3) NOT IN ('sp_', 'xp_', 'ms_')"
)

procedures <- procedures %>% mutate(name = paste0(procedures$SPECIFIC_SCHEMA, ".", procedures$SPECIFIC_NAME)) %>% 
  select(name)

##loops through each view and grabs the number of records in it

procsql <- procedures %>% mutate(sql = map_chr(procedures$name,
                                               ~paste0("SELECT * FROM sys.dm_sql_referenced_entities('",.x,"','OBJECT')"))
)

procsql <- procsql %>% group_by(name, sql) %>% nest()

procsql <- procsql %>% mutate(fetch = future_map(sql, possibly(~dbGetQuery(databasename, .x), otherwise = NA_character_)))

procsql <- procsql %>% unnest(fetch) %>% select(-sql)

procsql$type <- c("procedure")


# Combine both sections  ---------------------------------------------------
combined <- rbind(viewcombine, procsql)

combined <- combined %>% mutate(tablename = paste0(referenced_schema_name, ".", referenced_entity_name))


# Add SQL datatypes -------------------------------------------------------
datatypes <- DBI::dbGetQuery(
  databasename,
  "SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, DATA_TYPE
  FROM INFORMATION_SCHEMA.COLUMNS"
)

dependency <- left_join(combined, datatypes,  by = c("referenced_schema_name" = "TABLE_SCHEMA", 
                                                     "referenced_entity_name" = "TABLE_NAME",
                                                     "referenced_minor_name" = "COLUMN_NAME"))



progready <- sqlData(databasename, dataset, row.names = FALSE)

dbWriteTable(databasename, "Dependencies", progready)

